<head>
<style>
#tooltip {
    position: absolute;
    width: 95px;
    height: auto;
    padding: 10px;
    background-color: white;
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
    -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
    box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
    pointer-events: none;
}
#tooltip.hidden {
    display: none;
}
#tooltip p {
    margin: 0;
    font-family: sans-serif;
    font-size: 12px;
    line-height: 16px;
}
.indent {
    padding-left: 5px;
}
.heading {
    font-weight: bold;
}
#keyword {
    color: red;
    font-style: italic;
}
rect {
    -moz-transition: all 0.3s;
    -webkit-transition: all 0.3s;
    -o-transition: all 0.3s;
    transition: all 0.3s;
}
rect:hover {
    /*fill: orange;*/
    opacity: .75;
}
.axis path, .axis line {
    fill: none;
    stroke: black;
    shape-rendering: crispEdges;
}
.axis text {
    font-family: sans-serif;
    font-size: 11px;
}
</style>
</head>
<div id="searchVolume"></div>
<button class="change" onclick="updateBars('global')">Global Only</button>
<button class="change" onclick="updateBars('local')">Local Only</button>
<div id="tooltip" class="hidden">
    <p class="heading"><span id="keyword">word</span>

    </p>
    <p class="heading">Search Volume</p>
    <p class="indent"><span id="volVal">5</span>

    </p>
    <p class="heading">CPC</p>
    <p class="indent">$<span id="cpcVal">5</span>

    </p>
</div>

        <script type="text/javascript" src="http://d3js.org/d3.v3.min.js"> </script>

<script type="text/javascript">
var margin = {
    top: 25,
    right: 75,
    bottom: 85,
    left: 85
},
w = 600 - margin.left - margin.right,
h = 350 - margin.top - margin.bottom;
var padding = 10;

var colors = [
    ["Local", "#377EB8"],
    ["Global", "#4DAF4A"]
];

var dataset = [{
    "keyword": "payday loans",
        "global": 140000,
        "local": 73000,
        "cpc": "14.11"
}, {
    "keyword": "title loans",
        "global": 165000,
        "local": 160000,
        "cpc": "12.53"
}, {
    "keyword": "personal loans",
        "global": 150000,
        "local": 101000,
        "cpc": "6.14"
}, {
    "keyword": "online personal loans",
        "global": 15400,
        "local": 12900,
        "cpc": "5.84"
}, {
    "keyword": "online title loans",
        "global": 111600,
        "local": 11500,
        "cpc": "11.74"
}];

var xScale = d3.scale.ordinal()
    .domain(d3.range(dataset.length))
    .rangeRoundBands([0, w], 0.05);
// ternary operator to determine if global or local has a larger scale
var yScale = d3.scale.linear()
    .domain([0, d3.max(dataset, function (d) {
    return (d.local > d.global) ? d.local : d.global;
})])
    .range([h, 0]);
var xAxis = d3.svg.axis()
    .scale(xScale)
    .tickFormat(function (d) {
    return dataset[d].keyword;
})
    .orient("bottom");
var yAxis = d3.svg.axis()
    .scale(yScale)
    .orient("left")
    .ticks(5);

var commaFormat = d3.format(',');

//SVG element
var svg = d3.select("#searchVolume")
    .append("svg")
    .attr("width", w + margin.left + margin.right)
    .attr("height", h + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// Graph Bars
var globalbars = svg.selectAll("rect.global")
    .data(dataset)
    .enter()
    .append("rect")
    .attr("class", "global")
    .attr("width", xScale.rangeBand() / 2)
    .attr("y", function (d) {
    return yScale(d.global);
})
    .attr("x", 2 / xScale.rangeBand())
    .attr("height", function (d) {
    return h - yScale(d.global);
})
    .attr("fill", colors[1][1])
    .attr("transform", function (d, i) {
    return "translate(" + xScale(i) + ",0)";
})
    .on("mouseover", function (d, i) {
    //Get this bar's x/y values, then augment for the tooltip
    var xPosition = parseFloat(xScale(i) + xScale.rangeBand());
    var yPosition = h / 2;
    //Update Tooltip Position & value
    d3.select("#tooltip")
        .style("left", xPosition + "px")
        .style("top", yPosition + "px")
        .select("#cpcVal")
        .text(d.cpc);
    d3.select("#tooltip")
        .select("#volVal")
        .text(commaFormat(d.local));
    d3.select("#tooltip")
        .select("#keyword")
        .style("color", colors[1][1])
        .text(d.keyword);
    d3.select("#tooltip").classed("hidden", false);
})
    .on("mouseout", function () {
    //Remove the tooltip
    d3.select("#tooltip").classed("hidden", true);
});

var localbars = svg.selectAll("rect.local")
    .data(dataset)
    .enter()
    .append("rect")
    .attr("class", "local")
    .attr("width", xScale.rangeBand() / 2)
    .attr("y", function (d) {
    return yScale(d.local);
})
    .attr("x", xScale.rangeBand() / 2)
    .attr("height", function (d) {
    return h - yScale(d.local);
})
    .attr("fill", colors[0][1])
    .attr("transform", function (d, i) {
    return "translate(" + xScale(i) + ",0)";
})
    .on("mouseover", function (d, i) {
    //Get this bar's x/y values, then augment for the tooltip
    var xPosition = parseFloat(xScale(i) + xScale.rangeBand());
    var yPosition = h / 2;
    //Update Tooltip Position & value
    d3.select("#tooltip")
        .style("left", xPosition + "px")
        .style("top", yPosition + "px")
        .select("#cpcVal")
        .text(d.cpc);
    d3.select("#tooltip")
        .select("#volVal")
        .text(commaFormat(d.local));
    d3.select("#tooltip")
        .select("#keyword")
        .style("color", colors[0][1])
        .text(d.keyword);
    d3.select("#tooltip").classed("hidden", false);
})
    .on("mouseout", function () {
    //Remove the tooltip
    d3.select("#tooltip").classed("hidden", true);
});

// xAxis
svg.append("g") // Add the X Axis
.attr("class", "x axis")
    .attr("transform", "translate(0," + (h) + ")")
    .call(xAxis)
    .selectAll("text")
    .style("text-anchor", "end")
    .attr("dx", "-.8em")
    .attr("dy", ".15em")
    .attr("transform", function (d) {
    return "rotate(-25)";
});
// yAxis
svg.append("g")
    .attr("class", "y axis")
    .attr("transform", "translate(0 ,0)")
    .call(yAxis);
// xAxis label
svg.append("text")
    .attr("transform", "translate(" + (w / 2) + " ," + (h + margin.bottom - 5) + ")")
    .style("text-anchor", "middle")
    .text("Keyword");
//yAxis label
svg.append("text")
    .attr("transform", "rotate(-90)")
    .attr("y", 0 - margin.left)
    .attr("x", 0 - (h / 2))
    .attr("dy", "1em")
    .style("text-anchor", "middle")
    .text("# of Searches");

// Title
svg.append("text")
    .attr("x", (w / 2))
    .attr("y", 0 - (margin.top / 2))
    .attr("text-anchor", "middle")
    .style("font-size", "16px")
    .style("text-decoration", "underline")
    .text("Global & Local Searches");

// add legend   
var legend = svg.append("g")
    .attr("class", "legend")
    .attr("transform", "translate(70,10)");
var legendRect = legend.selectAll('rect').data(colors);

legendRect.enter()
    .append("rect")
    .attr("x", w - 65)
    .attr("width", 10)
    .attr("height", 10)
    .attr("y", function (d, i) {
    return i * 20;
})
    .style("fill", function (d) {
    return d[1];
});

var legendText = legend.selectAll('text').data(colors);

legendText.enter()
    .append("text")
    .attr("x", w - 52)
    .attr("y", function (d, i) {
    return i * 20 + 9;
})
    .text(function (d) {
    return d[0];
});

d3.select(".change").on("click", updateBars);

function updateBars(opts) {
    var gbars = svg.selectAll("rect.global");
    var lbars = svg.selectAll("rect.local");

    if (opts === 'global') {
        gbars.style("display", "block");
        lbars.style("display", "none");
        gbars.transition()
            .duration(500)
            .attr("width", xScale.rangeBand());
    };
    if (opts === 'local') {
        lbars.style("display", "block");
        gbars.style("display", "none");
        lbars.transition()
            .duration(500)
            .attr("x", 1 / -xScale.rangeBand())
            .attr("width", xScale.rangeBand());
    };
}
</script>
